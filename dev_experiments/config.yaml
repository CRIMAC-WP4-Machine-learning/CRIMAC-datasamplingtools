# Select various categories to filter a dataset.
# All the filters will be combined with an AND operator.
# Use `null` value to use all available data for a given filter.
# Pay attention to the input types.
# It is highly recommended to use the default input type for each filter.
# See type annotation for each filter below.

# # # Filter # # #
filter:

  # Type: list[int, ...]
  # Notes: only selects a survey, if it contains ALL the frequencies mentioned.
  frequencies: [38000, 120000]

  # Type: list[int, ...]
  # Notes: selects cruises that have AT LEAST ONE of the mentioned categories.
  categories: [24]

  # Partition (split) filters; this filter is available under "train" key; see examples to learn more
  partition_filters:
    train:
      # Type: list[str, ...]
      # Notes: if specified, all cruises with None for `name` are excluded
      names: null

      # Type: list[int, ...]
      # Notes: if specified, all cruises with None for `year` are excluded
      years: null

      # Type: bool
      # Notes: ...
      with_annotations_only: True

      # Type: bool
      # Notes: ...
      with_bottom_only: False

    partition_name_1:
      # Type: list[str, ...]
      # Notes: if specified, all cruises with None for `name` are excluded
      names: ["name1", "name2", "name3"]

      # Type: list[int, ...]
      # Notes: if specified, all cruises with None for `year` are excluded
      years: null

      # Type: bool
      # Notes: ...
      with_annotations_only: True

      # Type: bool
      # Notes: ...
      with_bottom_only: True

    partition_name_2:
      # Type: list[str, ...]
      # Notes: if specified, all cruises with None for `name` are excluded
      names: null

      # Type: list[int, ...]
      # Notes: if specified, all cruises with None for `year` are excluded
      years: [2023, 2022, 2021, 2020]

      # Type: bool
      # Notes: ...
      with_annotations_only: False

      # Type: bool
      # Notes: ...
      with_bottom_only: False
